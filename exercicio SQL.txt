1- select * from t_funcionarios 


2- SELECT f.*
FROM t_funcionarios f
JOIN t_departamento_funcionario df ON f.n_idfuncionario = df.n_idfuncionario
JOIN t_departamento d ON df.n_iddepto = d.n_iddepto
WHERE d.c_nomedepto = 'CONSTRUCAO';




3- SELECT *FROM t_departamento  
JOIN t_funcionarios ON n_idfuncionario_responsavel = n_idfuncionario
WHERE c_nomefuncionario = 'ANTONIO JOSE';


4- SELECT n_idprojeto, c_descr_projeto, n_custo
FROM t_projeto;


5-SELECT n_idprojeto, c_descr_projeto, d_fim
FROM t_projeto
WHERE d_fim IS NOT NULL;


6- SELECT 
    p.n_idprojeto,
    p.c_descr_projeto,
    p.n_iddepto,
    SUM(a.n_custo) AS custo_previsto
FROM 
    t_projeto p
LEFT JOIN 
    t_acompanhamento a ON p.n_idprojeto = a.idprojeto
GROUP BY 
    p.n_idprojeto, p.c_descr_projeto, p.n_iddepto;




7-SELECT
    p.n_idprojeto,
    p.c_descr_projeto,
    p.n_iddepto,
    COALESCE(SUM(a.n_custo), '0') AS custo_acompanhamento
FROM
    t_projeto p
LEFT JOIN
    t_acompanhamento a ON p.n_idprojeto = a.idprojeto
GROUP BY
    p.n_idprojeto, p.c_descr_projeto, p.n_iddepto;


8-   
     CREATE PROCEDURE VerificarErrosProjeto
AS
BEGIN
    DECLARE @v_total_custo_proj NUMERIC(18, 2);
    DECLARE @v_custo_acompanhamento NUMERIC(18, 2);
    DECLARE @v_total_diferenca_custo NUMERIC(18, 2);
    DECLARE @v_msg_diferenca VARCHAR(1000);

    DECLARE @id_projeto INT;
    DECLARE @custo_projeto MONEY;
    DECLARE @data_inicio_projeto DATE;
    DECLARE @data_fim_projeto DATE;

    DECLARE projeto_cursor CURSOR FOR
    SELECT n_idprojeto, n_custo, d_inicio, d_previsao_termino
    FROM t_projeto;

    OPEN projeto_cursor;
    FETCH NEXT FROM projeto_cursor INTO @id_projeto, @custo_projeto, @data_inicio_projeto, @data_fim_projeto;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- a) datas de acompanhamento fora das datas dos projetos
        IF NOT EXISTS (
                SELECT 1
                FROM t_acompanhamento
                WHERE idprojeto = @id_projeto
                AND (d_data < @data_inicio_projeto OR d_data > @data_fim_projeto)
        )
        BEGIN
            PRINT 'Erro no Projeto ' + CAST(@id_projeto AS VARCHAR) + ': Datas de acompanhamento fora das datas do projeto';
        END

        -- b) projetos que tiveram custos do acompanhamento acima do custo previsto
        SELECT @v_custo_acompanhamento = ISNULL(SUM(n_custo), 0)
        FROM t_acompanhamento
        WHERE idprojeto = @id_projeto;

        IF @v_custo_acompanhamento > @custo_projeto
        BEGIN
            PRINT 'Erro no Projeto ' + CAST(@id_projeto AS VARCHAR) + ': Custos do acompanhamento excedem o custo previsto';
        END

        -- c) projetos que atrasaram 
        IF GETDATE() > @data_fim_projeto
        BEGIN
            PRINT 'Aviso no Projeto ' + CAST(@id_projeto AS VARCHAR) + ': O projeto está atrasado';
        END

        -- d) informe as diferenças entre o custo do projeto e os gastos dos acompanhamentos - mostrando a (o que ainda tem em caixa para o projeto ou o que ultrapassou o valor esperado)
        SET @v_total_custo_proj = @custo_projeto;
        SET @v_total_diferenca_custo = @v_total_custo_proj - @v_custo_acompanhamento;

        IF @v_total_diferenca_custo >= 0
        BEGIN
            SET @v_msg_diferenca = 'Orçamento restante para o Projeto ' + CAST(@id_projeto AS VARCHAR) + ': R$' + CAST(@v_total_diferenca_custo AS VARCHAR);
        END
        ELSE
        BEGIN
            SET @v_msg_diferenca = 'Projeto ' + CAST(@id_projeto AS VARCHAR) + ' ultrapassou o orçamento em R$' + CAST(ABS(@v_total_diferenca_custo) AS VARCHAR);
        END

        PRINT @v_msg_diferenca;

        FETCH NEXT FROM projeto_cursor INTO @id_projeto, @custo_projeto, @data_inicio_projeto, @data_fim_projeto;
    END

    CLOSE projeto_cursor;
    DEALLOCATE projeto_cursor;
END;
EXEC VerificarErrosProjeto;

     

	



